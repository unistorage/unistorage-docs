API
===
Сервис предоставляет RESTful HTTP API для загрузки, получения информации и
применения различных операций к объектам.
Все запросы к API должны содержать HTTP-заголовок ``Token``,
содержащий токен доступа к сервису. Все ответы API имеют MIME-тип ``application/json`` и
в теле содержат словарь с данными. В ответе всегда присутствует статус (поле ``status``). Если
запрос прошёл неуспешно, ответ содержит статус ``"error"``, а также сообщение об
ошибке в поле ``msg``.

Ресурсы
=======
Объекты в Unistorage могут находиться в одном из следующих состояний.

Готовящийся файл (pending file)
-------------------------------
Готовящийся файл -- результат ещё не выполненной операции. Не доступен
для применения операций или просмотра.
Ресурс готовящегося файла содержит два поля:

* ``status``: строка ``"wait"``
* ``ttl``: количество секунд, по истечении которого объект может изменить
           своё состояние и, следовательно, должен быть перезапрошен клиентом

Временный файл (temporary file)
-------------------------------
Временный файл это готовящийся файл, который тем не менее доступен
для просмотра.
Ресурс временного файла содержит два поля:

* ``status``: строка ``"just_uri"``
* ``ttl``: количество секунд, по истечении которого объект может изменить
           своё состояние и, следовательно, должен быть перезапрошен клиентом
* ``data``: словарь с единственным полем ``url``, которое содержит URL
            бинарного содержимого файла

Обычный файл (regular file)
---------------------------
Обычный файл доступен для применения операций и просмотра, а также содержит
дополнительные метаданные.

Ресурс обычного файла содержит следующие поля:

* ``status``: строка ``"ok"``
* ``data``: словарь с данными о файле:

  * ``url``: URL бинарного содержимого файла
  * ``name``: имя файла
  * ``size`` : размер файла в байтах
  * ``mimetype``: строка, обозначающая MIME-тип файла
  * ``unistorage_type``: тип файла, как его распознал Unistorage. Возможные типы:
                         | ``image`` -- изображение
                         | ``video`` -- видео
                         | ``audio`` -- аудио
                         | ``doc`` -- документ
                         | ``presentation`` -- презентация
                         | ``unknown`` -- всё остальное
  * ``extra``: словарь с данными. Набор данных специфичен для Unistorage-типа файла.

.. note::

    Ниже описано содержимое ``extra`` для каждого из Unistorage-типов.

Изображение
~~~~~~~~~~~
``extra`` содержит следующие поля.

* ``width``: ширина в пикселях
* ``height``: высота в пикселях
* ``orientation``: ориентация изображения в терминах EXIF, целое число от 1 до 8
* ``is_animated``: булево значение, является ли изображение анимированным
* ``location``: словарь с полями ``latitude`` (от -90 до 90) и ``longitude`` (от -180 до 180),
                содержащий координаты в формате WGS84 или ``null``, если изображение не
                содержит EXIF-информации о местоположении

Видео
~~~~~
``extra`` содержит следующие поля.

* ``video``: словарь со следующими полями:

  * ``width``: ширина в пикселях
  * ``height``: высота в пикселях
  * ``codec``: кодек видео (например, ``"h264"``)
  * ``duration``: длительность в секундах
  * ``bitrate``: целое число, количество битов в секунду
  * ``fps``: число, количество кадров в секунду

* ``audio``:  словарь со следующими полями:

  * ``channels``: количество каналов
  * ``duration``: длительность в секундах
  * ``codec``: кодек аудио (например, ``"aac"``)
  * ``sample_rate``: частота дискретизации в герцах
  * ``bitrate``: целое число, количество битов в секунду

Аудио
~~~~~
``extra`` содержит следующие поля.

* ``channels``: количество каналов
* ``duration``: длительность в секундах
* ``codec``: кодек аудио (например, ``"aac"``)
* ``sample_rate``: частота дискретизации в герцах
* ``bitrate``: целое число, количество битов в секунду

Методы API
==========

Загрузка файла
--------------
| **Endpoint**: ``/``
| **Тип запроса**: POST multipart/form-data
| **Поля запроса**:

* ``file``: бинарное содержимое файла
* ``type_id`` (опциональное): идентификатор типа контента, (строка длиной не более 32 символов),
                            который будет использован для сбора статистики

**Формат ответа**:

::

    {
      "status": "ok",
      "resource_uri": "/50ac90767efa6e58e7a4f509"
    }

``resource_uri`` содержит относительный resource URI загруженного файла.

Пример загрузки файла с помощью curl::

    curl --form type_id=42qwe --form file=@<path-to-file> \
         --header "Token: 01234567890123456789012345678901" api.unistorage.ru

Получение данных о файле
------------------------
| **Endpoint**: resource URI
| **Тип запроса**: GET
| **Поля запроса**: отсутствуют

**Формат ответа**:

Обычный, готовящийся или временный файл.

Применение операции к файлу
---------------------------

| **Endpoint**: resource URI
| **Тип запроса**: GET
| **Поля запроса**:

* ``action``: имя операции
* аргументы операции

Также, если запрос содержит переменную ``with_low_priority`` (возможно, без значения),
операция будет исполнена с низким приоритетом.

**Формат ответа**:

::

    {
      "status": "ok",
      "resource_uri": "/50ac90767efa6e58e7a4f509"
    }

Ответ со статусом ``"ok"`` означает, что операция поставлена в очередь и будет
выполнена в ближайшем будущем, а её результат будет доступен по адресу ``resource_uri``.

Примеры запроса с помощью curl:

::

    curl --header "Token: 01234567890123456789012345678901" \
        http://localhost/503dd7c48149954c99f41a29/?action=resize&mode=crop&w=100&h=50.

Пример запроса операции с низким приоритетом:

::

    curl --header "Token: 01234567890123456789012345678901" \
        http://localhost/503dd7c48149954c99f41a29/?action=resize&mode=crop&w=100&h=50.&with_low_priority

Создание шаблона
~~~~~~~~~~~~~~~~
Шаблон -- упорядоченный набор совместимых операций и их аргументов. Под
совместимостью подразумевается возможность каждую последующую операцию
применить к результату предыдущей.  Сервис предоставляет возможность создавать
шаблоны и применять их к файлам из хранилища.

| **Endpoint**: ``/template/``
| **Тип запроса**: POST multipart/form-data
| **Поля запроса**:

* ``applicable_for``: Unistorage-тип файлов, к которым применим шаблон
* ``action[]``: список операций и их аргументов, заданных GET-строками

**Формат ответа**:

::

  {
    "status": "ok",
    "resource_uri": "..."
  }

``resource_uri`` содержит относительный resource URI созданного шаблона.

Пример запроса для создания шаблона, который вначале отресайзит картинку, после чего сделает её черно-белой:

::

    applicable_for: image
    action[]: action=resize&mode=keep&w=50&h=50
    action[]: action=grayscale

Получение данных о шаблоне
~~~~~~~~~~~~~~~~~~~~~~~~~~
| **Endpoint**: resource URI
| **Тип запроса**: GET
| **Поля запроса**: отсутствуют
| **Формат ответа**:

::

  {
    "status": "ok",
    "data": {
      "applicable_for": "image",
      "action_list": [
        ["resize", ["keep", 50, 50]],
        ["grayscale", []]]
      ],
    }
  }

Применение шаблона
~~~~~~~~~~~~~~~~~~
| **Endpoint**: resource URI файла
| **Тип запроса**: GET
| **Поля запроса**:

* ``template``: resource URI шаблона

Также, если запрос содержит переменную ``with_low_priority`` (возможно, без значения),
операция применения шаблона будет исполнена с низким приоритетом.

**Формат ответа**:

::

  {
    "status": "ok",
    "resource_uri": "..."
  }

Ответ со статусом ``"ok"`` означает, что применение шаблона ``template`` к файлу с
с заданным resource URI поставлено в очередь, и результат будет доступен по
адресу ``resource_uri``.

Создание ZIP-архива
~~~~~~~~~~~~~~~~~~~

Сервис предоставляет возможность создавать ZIP-архивы.
Созданные архивы не являются обычными файлами с точки зрения API,
так как имеют ограниченный срок жизни. Также к ним нельзя применять никаких последующих операций.

| **Endpoint**: ``/zip/``
| **Тип запроса**: POST multipart/form-data
| **Поля запроса**:

* ``file[]``: список resource URI архивируемых файлов
* ``filename``: имя архива

**Формат ответа**:

::

  {
    "status": "ok",
    "resource_uri": "..."
  }
``resource_uri`` содержит относительный resource URI созданного архива.

Получение данных о ZIP-архиве
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| **Endpoint**: resource URI архива
| **Тип запроса**: GET
| **Поля запроса**: отсутствуют
| **Формат ответа**:

::

  {
    "status": "ok",
    "ttl": 604800,
    "data": {
      "url": "http://127.0.0.1/uns/503dd7c48149954c99f41a29"
    }
  }

.. note:: архивы перестают быть доступными по истечении своего TTL.

Операции над объектами
======================

Операции над изображениями
--------------------------

Конвертация в другой формат
~~~~~~~~~~~~~~~~~~~~~~~~~~~
| Имя операции: ``convert``
| Аргументы:

* ``to``: bmp, gif, jpeg, png, tiff

Изменение размера
~~~~~~~~~~~~~~~~~
| Имя операции: ``resize``
| Аргументы:

* ``w``: высота
* ``h``: ширина
* ``mode``: одно из следующих значений:

  * ``resize``
    Изображение ресайзится до размера на w×h без сохрания пропорций.

  * ``keep``
    Изображение ресайзится с сохранением пропорций так, чтобы выполнялось одно из условий:

      * высота изображения == w, ширина < h
      * ширина изображения == h, высота < w

    Можно указывать только одно из измерений.

  * ``crop``

    1. Изображение ресайзится с сохранением пропорций так, чтобы выполнялось одно из условий:
      * высота изображения == w, ширина > h
      * ширина изображения == h, высота > w
    2. Из середины полученного изображения вырезается прямоугольник размером w×h.

Приведение к черно-белому формату
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
| Имя операции: ``grayscale``
| Аргументы: отсутствуют

Поворот
~~~~~~~
| Имя операции: ``rotate``
| Аргументы:

* ``angle``: угол поворота (считается против часовой стрелки), допустимые значения: 90, 180, 270

Ориентация
~~~~~~~~~~
| Имя операции: ``orient``
| Аргументы: отсутствуют

Поворачивает изображение в соответствии с ориентацией, указанной в EXIF-данных.

Кроп
~~~~
| Имя операции: ``crop``
| Аргументы:

* ``x``, ``y``: координаты верхнего левого угла
* ``w``: ширина вырезаемой области
* ``h``: высота вырезаемой области

Верхний левый угол исходного изображения имеет координаты ``(0, 0)``.


Оптимизация
~~~~~~~~~~
| Имя операции: ``optimize``
| Аргументы: отсутствуют

Оптимизирует размер файла для изображений формата JPEG и PNG без потери качества. JPEG оптимизируется засчет использования таблиц Хаффмана, PNG оптимизируется с помощью алгоритма медианного рассечения.

Операции над видео
------------------

Конвертация в другой формат/перекодирование
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
| Имя операции: ``convert``
| Аргументы:

* `to`: ogg, webm, flv, avi, mkv, mov, mp4, mpg
* `vcodec`: theora, h264, vp8, divx, h263, flv, mpeg1, mpeg2
* `acodec`: vorbis, mp3, aac

Некоторые контейнеры поддерживают не все кодеки:

.. raw:: html

  <table>
    <tr>
      <th>Контейнер</th> <th>Видеокодеки</th> <th>Аудиокодеки</th>
    </tr>
    <tr>
      <td>ogg</td>
      <td>theora</td>
      <td>vorbis</td>
    </tr>
    <tr>
      <td>webm</td>
      <td>vp8</td>
      <td>vorbis</td>
    </tr>
    <tr>
      <td>flv</td>
      <td>h264, flv</td>
      <td>vorbis, mp3, aac</td>
    </tr>
    <tr>
      <td>mp4</td>
      <td>h264, divx, mpeg1, mpeg2</td>
      <td>vorbis, mp3, aac</td>
    </tr>
  </table>

Конвертировать в ogg и webm можно использовать без указания кодеков:
``?action=convert&to=(ogg|webm)``

Извлечение аудио-потока
~~~~~~~~~~~~~~~~~~~~~~~
| Имя операции: ``extract_audio``
| Аргументы:

* ``to``: alac, aac, vorbis, ac3, mp3, flac

Захват кадра из видео
~~~~~~~~~~~~~~~~~~~~~
| Имя операции: `capture_frame`
| Аргументы:
* ``to``: bmp, gif, jpeg, png, tiff
* ``position``: какой кадр захватить -- количество секунд от начала видео
                (возможно, дробное)

Операции, применимые к аудио
----------------------------

Перекодирование
~~~~~~~~~~~~~~~

| Имя операции: ``convert``
| Аргументы:

* ``to``: alac, aac, vorbis, ac3, mp3, flac

Операции, применимые и к изображениям, и к видео
------------------------------------------------

Наложение ватермарка
~~~~~~~~~~~~~~~~~~~~
| Имя операции: ``watermark``
| Аргументы:

* ``watermark``: resource URI ватермарка
* ``w``, ``h``: ширина и высота прямоугольника, в который будет вписан ватермарк перед наложением
* ``w_pad``, ``h_pad``: горизонтальный и вертикальный отступы
* ``corner``: угол, в который будет помещён ватермарк: ne, se, sw, nw

Значения ``w``, ``h``, ``w_pad``, ``h_pad`` могут быть указаны как в процентах от картинки,
на которую накладывается ватермарк, так и в пикселях.
``w=25``, например, считается процентами, а ``w=25px`` -- пикселями.

Операции над документами
------------------------

Конвертация в другой формат
~~~~~~~~~~~~~~~~~~~~~~~~~~~
| Имя операции: `convert`
| Аргументы:

* `to`: doc, docx, odt, pdf, rtf, txt, html
